
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/VcfParser.ipynb

import numpy as np
import pandas as pd
import re
import os
from tqdm import tqdm


class VcfParser:
    def __init__(self, impacts, vcf=None, df=None):
        IMPACTS = ["HIGH", "MODERATE", "LOW", "MODIFIER"]
        impacts = [i.upper() for i in impacts]
        # make sure impact sorted from high to modifier
        impacts = [i for i in IMPACTS if i in impacts]
        self.vcf = vcf
        self.df = df
        self.impacts = impacts
        self.IMPACTS = IMPACTS
        print(f"parsing variants with impacts of: {self.impacts}!")

    def keep(self, series, patterns):
        return series.str.contains("|".join(patterns), case=False)

    def parse_effect(self, line):
        effs = line.split("EFF=")[1].split(",")
        effs = [
            list(np.array(re.split("\(|\|", ef))[[0,1,2,4,6,9]]) for ef in effs if (
                any([''.join(['(', i, '|']) in ef for i in self.IMPACTS])
            )
        ]
        for impact in [a.upper() for a in self.impacts]:
            pick = [e for e in effs if impact in e]
            if pick:
                break
        return pick

    def parse_vcf(self):
        if os.stat(self.vcf).st_size == 0:
            print(f"WARNING: empty file>{self.vcf}")
            return pd.DataFrame()
        print(f"parsing vcf: {self.vcf}")
        df = pd.read_csv(self.vcf, comment="#", sep="\t", header=None, low_memory=False)
        patient = self.vcf.split("/")[4]
        df = df[[0, 1, 3, 4, 7]]
        df.columns = ["chr", "pos", "ref", "alt", "effect"]
        df = df[self.keep(df["effect"], self.impacts)]
        if not df.empty:
            df['anno'] = df['effect'].apply(lambda x: self.parse_effect(x))
            df["patient"] = patient
            df = df.explode('anno')
            df[['impact','impact_type', 'type', 'AA_change', 'gene', 'transcript']] = (
                pd.DataFrame(df['anno'].values.tolist(), index=df.index)
            )
        df = df.drop(["effect", "anno"], axis=1)
        return df

    def summarize_cohort(self):
        dfmg = pd.DataFrame()
        for ix, row in tqdm(self.df.iterrows()):
            patient = ix
            snv_vcf = row["snv"]
            indel_vcf = row["indel"]
            self.vcf = snv_vcf
            snv_df = self.parse_vcf()
            self.vcf = indel_vcf
            indel_df = self.parse_vcf()
            mdf = pd.concat([snv_df, indel_df], sort=False)
            mdf = mdf.drop_duplicates(keep="first")
            if dfmg.empty:
                dfmg = mdf
            else:
                dfmg = pd.concat([dfmg, mdf], sort=False)
        return dfmg